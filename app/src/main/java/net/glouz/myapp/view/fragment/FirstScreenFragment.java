package net.glouz.myapp.view.fragment;

import android.database.ContentObserver;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import net.glouz.myapp.R;
import net.glouz.myapp.controller.FirstScreenController;
import net.glouz.myapp.event.ProductEvent;
import net.glouz.myapp.model.models.product.ProductCategoriesContract;

/**
 * Created by glouzonf on 05/05/2015.
 */
public class FirstScreenFragment extends BaseFragment implements LoaderManager.LoaderCallbacks<Cursor> {

    public static final String TAG = FirstScreenFragment.class.getSimpleName();

    private FirstScreenController mFirstScreenController;
    private ProductObserver mProductObserver;
    private View mRootView;

    private LoaderManager.LoaderCallbacks<Cursor> mCallbacks;

    public static FirstScreenFragment newInstance() {
        FirstScreenFragment firstScreenFragment = new FirstScreenFragment();
        Bundle args = new Bundle();
        firstScreenFragment.setArguments(args);
        return firstScreenFragment;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        mRootView = inflater.inflate(R.layout.first_screen_fragment, container, false);
        return mRootView;
    }

    @Override
    void initialiseObjects() {
        mFirstScreenController = new FirstScreenController(mRootView);
    }

    @Override
    public void onStart() {
        super.onStart();

        mCallbacks = this;

        try {
            mProductObserver = new ProductObserver(new Handler());
            getActivity().getContentResolver().registerContentObserver(ProductCategoriesContract.CONTENT_URI, true, mProductObserver);

//            //the sqlite database and the tables are generated by ormlite so we have to check that their creation
//            //is finished before trying to interact with them via the content provider.
//            if (DaoHelper.isTableExists(getActivity(), TableName.PRODUCT_CATEGORIES)) {
//                getLoaderManager().restartLoader(0, null, this);
//            }
        } catch (Exception e) {
            Log.e(TAG, "Impossible to observer changes for " + ProductCategoriesContract.CONTENT_URI);
        }
    }

    @Override
    public void onStop() {
        super.onStop();
        getActivity().getContentResolver().unregisterContentObserver(mProductObserver);
    }

    @Override
    boolean butterknifeInject() {
        return false;
    }

    @Override
    void initialiseViews() {

    }

    @Override
    void updateViews() {

    }

    @Override
    void updateData() {
        mFirstScreenController.clearWishlistAndBasketData();
        mFirstScreenController.getProductsCategories();
    }

    public void onEventMainThread(ProductEvent productEvent) {
        if (productEvent !=null && productEvent.productsCategoriesFetchedAndCachedFromFirstScreen){
            mFirstScreenController.getProductsCategoriesSuccessfull();
            mFirstScreenController.goToMainActivity(getActivity());
//            getLoaderManager().restartLoader(0, null, mCallbacks);
        }
    }

    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        return new CursorLoader(getActivity(), ProductCategoriesContract.CONTENT_URI, null,
                null, null, null);
    }

    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {
//        mFirstScreenController.getProductsCategoriesSuccessfull();
//        mFirstScreenController.goToMainActivity(getActivity());
//        mFirstScreenController.updateViews(cursor);
    }

    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        Log.e(TAG, "Categories not loaded");
    }


    public class ProductObserver extends ContentObserver {
        public ProductObserver(Handler handler) throws ClassNotFoundException, IllegalAccessException, NoSuchFieldException {
            super(handler);
        }

        @Override
        public void onChange(boolean selfChange) {
            super.onChange(selfChange);
//            getLoaderManager().restartLoader(0, null, mCallbacks);
        }
    }
}